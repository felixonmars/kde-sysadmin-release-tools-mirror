#!/bin/bash
# This is the main script.
# Call it with the package name as argument, like:  ./pack kdelibs
# Make sure to update the version numbers inside the script first.
#
# Environment variables that can be set
# $scriptpath = path to kde-common/release (by default: .. )

package=$1
version=$2

if test -z "$version"; then 

case $package in
  qt-copy)
    version=3.1_20021104
    ;;
  arts) 
    version=1.4.0
    ;;
  kdevelop)
    version=3.2.0
    ;;
  koffice)
    version=1.3.98
    ;;
  koffice-l10n)
    version=1.3.98
    ;;
  *)
    version=3.4.0
    ;;
esac

fi

isl10n=0
case $package in
  *-l10n)
    isl10n=1
    ;;
esac

if test -z "$scriptpath"; then
  scriptpath=".."
fi

CDPATH=""
export UNSERMAKE=no  # very important for now :)
MEINPROCPATH=`type -p meinproc`
if test -f "$MEINPROCPATH"; then
  MEINPROCPATH=`dirname $MEINPROCPATH`
fi
if test -n "$MEINPROCPATH"; then
  export PATH=$MEINPROCPATH:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin
  echo "PATH changed to $PATH"
fi
test -n "$package" || { echo "requires modulename as parameter"; exit 1; }
test -d clean || { echo "create clean subdir with cvs checkout"; exit 1; }
test -d dirty || mkdir dirty || { echo "create empty subdir dirty"; exit 1; }
test -d sources || mkdir sources || { echo "create empty subdir sources"; exit 1; }
test -d sources-old || { echo "create empty subdir sources-old with reference files for xdelta"; exit 1; }
if test $isl10n -eq 1; then
  test -d sources/$package || mkdir sources/$package || { echo "create empty subdir sources/$package"; exit 1; }
fi

test -d clean/$package || { echo "clean/$package does not exist"; exit 1; }
test -d dirty/$package-$version && { echo "rm -rf dirty/$package-$version"; rm -rf dirty/$package-$version; }
test -d dirty/$package && { echo "rm -rf dirty/$package"; rm -rf dirty/$package; }

if test -z "$HARDLINKS"; then
  echo "cp -pr clean/$package dirty"
  cp -pr clean/$package dirty || exit 1
else
  echo "cp -prl clean/$package dirty"
  cp -prl clean/$package dirty || exit 1
fi
{
  echo "cd dirty"
  cd dirty || exit 1

if test -z "$DOINGSNAPSHOT"; then
  if test $isl10n -eq 1; then
    mv $package/subdirs $package/subdirs.orig
    cp ../language_list $package/subdirs
  fi

  # remove nonreleased stuff
  echo "removestuff $package"
  $scriptpath/removestuff $package $version || exit 1
fi

  # Anonymize checkout
  echo "anon $package"
  $scriptpath/anon $package || exit 1
 
if test -z "$DOINGSNAPSHOT"; then
  # Generate docu
  echo "docu $package"
  $scriptpath/docu $package 
fi

  # Prepare for distribution
  echo "dist $package"
  $scriptpath/dist $package $version || exit 1

  # Final packaging
  if test $isl10n -eq 1; then
    cd $package
    echo "making per-language tarballs"
    cat subdirs | while read lang; do
      tar --owner=root --group=root -c --exclude autom4te.cache $lang | bzip2 -9 > ../../sources/$package/$package-$lang.tar.bz2
    done
    cd ..
  else
   echo "mv $package $package-$version"
   mv $package $package-$version || exit 1
   echo "tar cjf $package-$version.tar.bz2 $package-$version"
   tar --owner=root --group=root -cf $package-$version.tar $package-$version || exit 1
  fi

  # Xdelta
  if test "$package" = "kde-l10n"; then
    cd ../sources
    # for kde-l10n we only generate xdelta for the small files
    # #### double-check this code
    files=`cd ../sources/kde-l10n && ls -1 kde-l10n-*-$version.tar.bz2 2> /dev/null`
    for file in $files; do
	lang=${file/kde-l10n-/}
	lang=${lang/-$version.tar.bz2/}
	oldlang=`ls -1 ../sources-old/kde-l10n/kde-l10n-$lang-*tar.bz2 2>/dev/null | tail -n 1`
	if test -n "$oldlang" && test -r "$oldlang"; then
	    cp $oldlang kde-l10n
	    echo "bunzip2 kde-l10n/kde-l10n-$lang-$version.tar.bz2"
	    bunzip2 kde-l10n/kde-l10n-$lang-$version.tar.bz2
            cd kde-l10n 
            ../$scriptpath/xdelta kde-l10n-$lang-*.bz2 kde-l10n-$lang-$version.tar
	    cd ..
	    rm -f kde-l10n/kde-l10n-$lang-*.bz2
            echo "bzip2 kde-l10n/kde-l10n-$lang-$version.tar"
	    bzip2 kde-l10n/kde-l10n-$lang-$version.tar
        fi
    done
    cd ../dirty

  else
    # generate xdeltas
    if test "$package" = "koffice"; then
        # For KOffice, the modules are named "koffice" and "koffice-l10n"
        # so search for koffice*tar.bz2 returns 2 files.
        oldpackage=`ls -1 ../sources-old/$package*tar.bz2 2>/dev/null | fgrep -v l10n`
    else
        # Normal case, no problem with a pseudo-duplicate
        oldpackage=`ls -1 ../sources-old/$package*tar.bz2 2>/dev/null | tail -n 1`
    fi
    if test -n "$oldpackage" && test -r $oldpackage; then 
        cp $oldpackage .
        $scriptpath/xdelta $package*tar.bz2 $package*tar
        mv $package*.tar.xdelta ../sources
    fi
  fi

  if test $isl10n -eq 0; then
    bzip2 -9 $package-$version.tar
    mv $package-$version.tar.bz2 ../sources
    rm -f $package*tar
    rm -rf $package-$version
  fi
}
rm -rf dirty/$package || exit 1
