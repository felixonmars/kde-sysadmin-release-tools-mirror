#!/bin/bash
# This is the main script.
# Call it with the package name as argument, like:  ./pack kdelibs
# Make sure to update the version numbers inside "common" first.
#
# Environment variables that can be set
# $scriptpath = path to kde-common/release (by default: .. )

source `dirname $0`/common $1 $2

MEINPROCPATH=`type -p meinproc`
if test -f "$MEINPROCPATH"; then
  MEINPROCPATH=`dirname $MEINPROCPATH`
fi
if test -n "$MEINPROCPATH"; then
  export PATH=$MEINPROCPATH:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin
  echo "PATH changed to $PATH"
fi
test -n "$package" || { echo "requires modulename as parameter"; exit 1; }
test -d clean || { echo "create clean subdir with svn checkout"; exit 1; }
test -d dirty || mkdir dirty || { echo "create empty subdir dirty"; exit 1; }
test -d sources || mkdir sources || { echo "create empty subdir sources"; exit 1; }
if test $isl10n -eq 1; then
  test -d sources/$package || mkdir sources/$package || { echo "create empty subdir sources/$package"; exit 1; }
fi

test -d clean/$package || { echo "clean/$package does not exist"; exit 1; }
test -d dirty/$package-$version && { echo "rm -rf dirty/$package-$version"; rm -rf dirty/$package-$version; }
test -d dirty/$package && { echo "rm -rf dirty/$package"; rm -rf dirty/$package; }

if test -z "$HARDLINKS"; then
  echo "cp -pr clean/$package/ dirty"
  cp -pr clean/$package/ dirty || exit 1
else
  echo "cp -prl clean/$package/ dirty"
  cp -prl clean/$package/ dirty || exit 1
fi

echo "cd dirty"
cd dirty || exit 1

# svn tarball for nightly snapshots
if test -n "$DOINGSNAPSHOT"; then

  echo "SVN tarball generation"
  date

  # Add documentation for a README.
  cat > $package/README.svn-nightly <<EOF
Subversion revision: $version

This directory contains a checkout of the KDE Subversion repository for the
$package module.  It is already configured to update from the KDE anonymous
Subversion repository.

You may notice that the directory appears empty.  This is because Subversion
duplicates the files, and only one copy was included in the tarball.  To
restore the directory to normal, run "svn revert -R .", which will cause
Subversion to fix the directory to have the files duplicated as normal.

After this, you can run svn update as normal.  You may wish to do so now to
pick up the changes you may have missed between now and when this module was
packaged.

If you wish to switch to a different Subversion repository, please run
"svn switch --relocate svn://anonsvn.kde.org/ <NEW REPO URL>"

Subversion-over-SSH users would use something like:
"svn switch --relocate svn://anonsvn.kde.org/ svn+ssh://<username>@svn.kde.org/"

HTTPS users would do:
"svn switch --relocate svn://anonsvn.kde.org/ https://<username>@svn.kde.org/"
EOF

  # We've switched, compile list of files that need to be tarred up.
  echo "find $package -path '*/.svn/*' > $package-files"
  find $package -path '*/.svn/*' > $package-files

  # Add README to the file list.
  echo "$package/README.svn-nightly" >> $package-files

  # Create the tarball.
  echo "tar cjf $package-svn-$version.tar.bz2"
  tar --owner=root --group=root -T $package-files -cjf $package-svn-$version.tar.bz2 || exit 1

  echo "mv $package-svn-$version.tar.bz2 ../sources"
  mv $package-svn-$version.tar.bz2 ../sources

  # Cleanup
  rm $package/README.svn-nightly
  rm $package-files

  echo "-- SVN tarball generation done"
  date
fi

# Anonymize checkout by removing the SVN information from it.
echo "anon $package"
$scriptpath/anon $package || exit 1

if test -z "$DOINGSNAPSHOT"; then
  # Generate docu
  echo "docu $package"
  $scriptpath/docu $package 
fi

# Prepare for distribution
echo "dist $package"
$scriptpath/dist $package $version || exit 1

# Final packaging
echo "taritup $package"
$scriptpath/taritup $package $version || exit 1

