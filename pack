#!/bin/bash
# This is the main script.
# Call it with the package name as argument, like:  ./pack kdelibs
# Make sure to update the version numbers inside the script first.

package=$1
version=$2

if test -z "$version"; then 

case $package in
  qt-copy)
    version=3.1_20021104
    ;;
  arts) 
    version=1.1
    ;;
  kdevelop)
    version=3.0a3
    ;;
  kdoc)
    version=2.0a54
    ;;
  koffice)
    version=1.2.1
    ;;
  koffice-i18n)
    version=1.2.1
    ;;
  quanta)
    version=3.1
    ;;
  *)
    version=3.1
    ;;
esac

fi

CDPATH=""

test -n "$package" || { echo "requires modulename as parameter"; exit 1; }
test -d clean || { echo "create clean subdir with cvs checkout"; exit 1; }
test -d dirty || { echo "create empty subdir dirty"; exit 1; }
test -d sources || { echo "create empty subdir sources"; exit 1; }
test -d sources-old || { echo "create empty subdir sources-old with reference files for xdelta"; exit 1; }
if [ $package = kde-i18n ]; then
  test -d sources/kde-i18n || { echo "create empty subdir sources/kde-i18n"; exit 1; }
fi
if [ $package = koffice-i18n ]; then
  test -d sources/koffice-i18n || { echo "create empty subdir sources/koffice-i18n"; exit 1; }
fi

test -d clean/$package || { echo "clean/$package does not exist"; exit 1; }
test -d dirty/$package-$version && { echo "rm -rf dirty/$package-$version"; rm -rf dirty/$package-$version; }
test -d dirty/$package && { echo "rm -rf dirty/$package"; rm -rf dirty/$package; }

echo "cp -pr clean/$package dirty"
cp -pr clean/$package dirty || exit 1
{
  echo "cd dirty"
  cd dirty || exit 1

if test -z "$DOINGSNAPSHOT"; then
  # remove nonreleased stuff
  echo "removestuff $package"
  ../removestuff $package $version || exit 1
fi

  # Anonymize the CVS dirs
  echo "anon $package"
  ../anon $package || exit 1
 
if test -z "$DOINGSNAPSHOT"; then
  # Generate docu
  echo "docu $package"
  ../docu $package 
fi

  # Prepare for distribution
  echo "dist $package"
  ../dist $package $version || exit 1

  # Final packaging
  echo "mv $package $package-$version"
  mv $package $package-$version || exit 1
  echo "tar cjf $package-$version.tar.bz2 $package-$version"
  tar --owner=root --group=root -cf $package-$version.tar $package-$version || exit 1

  # generate xdeltas
  oldpackage=`ls -1 ../sources-old/$package*tar.bz2 2>/dev/null`
  if test -n "$oldpackage" && test -r $oldpackage; then 
      cp $oldpackage .
      ../xdelta $package*tar.bz2 $package*tar
      mv $package*.tar.xdelta ../sources
  fi

  bzip2 -9 $package-$version.tar
  mv $package-$version.tar.bz2 ../sources
  rm -f $package*tar
  rm -rf $package-$version
}
rm -rf dirty/$package || exit 1
