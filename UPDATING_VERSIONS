== Release Engineering ==

Choose version number: 
 * remember that RPM is stupid and considers 5.0beta1 newer than
   5.0, so always use "code versions" for the packages. Also
   stuff like "-" etc is not working, so omit it

Make sure that dependencies are met:
 * new phonon release needed?
 * new soprano release needed?
 * new akonadi release needed (check kdepimlibs/akonadi/session_p.h)

Ensure everything is green in build.kde.org
Ensure there are no unrelated local changes, then proceed with updating the version numbers:

For each release (i.e. x.y.z)
 * kdelibs/CMakeLists.txt - KDE_VERSION_*
 * kdelibs/README - This is version x.y.z of the KDE libraries.
 * kdelibs/cmake/modules/KDE4Defaults.cmake - GENERIC_LIB_VERSION and KDE_NON_GENERIC_LIB_VERSION
 * kdelibs/kdecore/sycoca/ksycoca.cpp --> KSYCOCA_VERSION
 * kdepimlibs/CMakeLists.txt - KDEPIMLIBS_VERSION_*
 * kde-workspace/CMakeLists.txt - KDE4WORKSPACE_VERSION_*
 * kdepim/CMakeLists.txt - KDEPIM_DEV_VERSION / KDEPIM_VERSION
 * kdepim-runtime/CMakeLists - KDEPIM_RUNTIME_DEV_VERSION and KDEPIM_RUNTIME_VERSION

For KDE Frameworks releases
 files=`ls -1 frameworks/*/CMakeLists.txt`
 Ask Alex Merry if in doubt whether it's worth making a new ECM release
 Update versions:
  * kservice/src/sycoca/ksycoca.cpp --> KSYCOCA_VERSION
  * extra-cmake-modules/CMakeLists.txt - ECM_*_VERSION
  * perl -pi -e '$_ =~ s/\Q$1/5.0.0/ if (/^set.KF5_VERSION \"([^\"]*)\"/);' `echo $files`
    for f in `echo $files`; do (d=`dirname $f`; echo $d; cd $d ; git up; git commit -a -m 'Upgrade KF5 version.'; git push) ; done

 Then wait for a successful rebuild on build.kde.org, to avoid failing all the frameworks at the next commit

 Upgrade version requirements:
  * perl -pi -e 's/ECM 0\.0\.[0-9]*/ECM 0\.0\.15/g' `echo $files`
  * perl -pi -e '$_ =~ s/\Q$1/5.0.0/ if (/^set.KF5_DEP_VERSION \"([^\"]*)\"/);' `echo $files`
  * for f in `echo $files`; do (d=`dirname $f`; echo $d; cd $d ; git up; git commit -a -m 'Upgrade ECM and KF5 version requirements.'; git push) ; done

